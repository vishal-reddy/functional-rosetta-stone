apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'nebula.clojure'

buildscript {
    ext.kotlin_version = '1.0.4'

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }

        mavenCentral()
    }

    dependencies {
        classpath "com.netflix.nebula:nebula-clojure-plugin:4.0.2"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

repositories {
    mavenCentral()
    clojarsRepo()
    jcenter()
}

dependencies {
    compile 'org.clojure:clojure:1.8.0'
    compile 'org.funktionale:funktionale-currying:1.0.0-final'
    testCompile 'junit:junit:4.12'
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

configurations { nrepl }

dependencies {
    nrepl 'org.clojure:tools.nrepl:0.2.7'
    nrepl 'org.clojure:clojure:1.6.0'
}

task nrepl(type: JavaExec) {
    classpath project.sourceSets.main.clojure.srcDirs,
            project.sourceSets.test.clojure.srcDirs,
            sourceSets.test.runtimeClasspath,
            sourceSets.main.runtimeClasspath,
            configurations.nrepl

    main = "clojure.main"
    args '--eval', "(ns gradle-nrepl (:require [clojure.tools.nrepl.server :refer (start-server stop-server)]))",
            '--eval', "(println \"Starting nrepl server on port $nreplPort\")",
            '--eval', "(def server (start-server :port $nreplPort))"
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}
